<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <arg name="robot" default="quadrotor" />
  <arg name="cam0" default="/ovc/left" />
  <arg name="cam1" default="/ovc/right" />
  <arg name="image" default="image_raw" />
  <arg name="imu" default="/ovc/vectornav/imu" />
  <arg name="robot_frame_id" default="$(arg robot)/base_link" />
  <!-- This frame_id should be the frame_id of the imu used for S-MSCKF	 -->
  <arg name="vio_imu_frame_id" default="$(arg robot)/ovc_camera_link" />
  <arg name="vio_ref_frame_id" default="$(arg robot)/odom" />
  <!-- This should be set true for simulation -->
  <arg name="publish_body_camera_tf" default="false" />

  <!-- Use msckf_calib_gen to generate this yaml file when using unity sim -->
  <arg name="calibration_file" default="$(find real_experiment_launch)/launch/uav_ugv_localization/msckf_config/msckf_calib.yaml" />


  <!-- publish_tf -->
  <include file="$(find real_experiment_launch)/launch/uav_ugv_localization/publish_tf_atl.launch">
    <arg name="robot" value="$(arg robot)" />
  </include>

  <group ns="$(arg robot)">
    <!-- Image Processor Nodelet -->
    <include file="$(find estimation_launch)/launch/msckf_imgproc.launch">
      <arg name="calibration_file" value="$(arg calibration_file)" />
      <arg name="imu" value="$(arg imu)" />
      <arg name="cam0" default="$(arg cam0)" />
      <arg name="cam1" default="$(arg cam1)" />
      <arg name="image" default="$(arg image)" />
    </include>
    <!-- Msckf Filter Nodelet -->
    <include file="$(find estimation_launch)/launch/msckf_vio.launch">
      <arg name="calibration_file" value="$(arg calibration_file)" />
      <arg name="imu" value="$(arg imu)" />
      <!-- fixed reference frame for vio -->
      <arg name="fixed_frame_id" value="$(arg vio_ref_frame_id)" />
      <arg name="child_frame_id" value="$(arg vio_imu_frame_id)" />
    </include>
  </group>

  <!-- only necessary for simulation (for real world experiment is handled in publish_tf.launch) -->
  <!-- stereo-inertial system imu frame to body frame transform -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg robot)_imu_body_tf" args="0 0 0 0 0 0 $(arg robot_frame_id) $(arg vio_imu_frame_id)" if="$(arg publish_body_camera_tf)" />


</launch>